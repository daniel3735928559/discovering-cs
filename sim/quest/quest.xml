<?xml version="1.0" encoding="UTF-8"?><quest name="Python Intro" id="0">
  <q type="python" id="Basics">
<program>x = 2
y = 4</program>
<text>First things first, let's learn how to use this thing.  Observe
the code in the editor to the right.  <p>Press [run] to start running
the program.  While the program is running, the program cannot be
modified.  Press [step] (or use Shift+S) to advance through the
program.  Note how the variables change as you do so.</p><p>The
program will stop running either when you step through the last
instruction or when you press [end] (or use Shift+E), at which point
you can modify the program again.  </p><p>To make the step button take
more steps at once, enter a higher number in the box next to it.</p>
</text>
</q>

<q type="python" id="Variables">
  <program>x = 3+2
y = 1+x*(-1)
hello = (x+2*y)/y
x = x + 1
y = y - x</program>
  <text>Variables are like the computer's internal memory (which we've exposed for you to see).  Variables are how you store things.  To create one, simply write a line like <pre><i>name</i> = <i>value</i></pre>  The name can be any combination of letters and underscores.  The value can be any <b>expression</b>.  That is, any number, variable name, or some combination of numbers and variables using the four arithmetic operations and parentheses.</text>
</q>

<q type="python" id="Strings">
  <program>hello = "Hello!"
x = "\"Meow!\", they \\ exclaimed in unison"</program>
  <text>Expressions do not have to be numbers.  They can also be
  <b>strings</b>, which are the computer's way of storing text.  The
  symbols comprising text (letters, numbers, punctuation, and anything
  else) are called <b>characters</b>.  A string is any sequence of
  characters enclosed in double quotes, such as

  <pre>"Hello World!"</pre>

  Obviously, the characters inside the string cannot include the
  double-quote character: ".  To put a " into a string, precede it
  with a backslash like:

  <pre>\"</pre>

  This is called <b>escaping</b> the character.  There are certain
  characters where escaping them (i.e. preceding them with a
  backslash) gives them different meaning.  Normally, a " means "the
  end of the string".  But if you escape it, now it means "put a
  double quote character actually into the string.  Some other
  characters can be escaped as well.  For instance, if you escape the
  n character as in

  <pre>\n</pre>

  you get a line-break inserted into your string.

  <p>So now how do you put a backslash character itself into a string?
  Escape it!  <pre>\\</pre> Since expressions can be strings, we can
  store strings in variables just like we could store
  numbers.</p></text>
</q>

<q type="python" id="Output">
  <program>print("Hello")
x = -3
print(x+1)</program>
  <text>Output is how you would normally print text to the screen.  In
  this simulation, output goes to the "Output" column.  <p>To output
  something, use <pre>print(<i>expression</i>)</pre>.  This allows us
  to output any string or number that we could have stored in a
  variable.  It also allows us to output variables, as variables are
  also expessions.  See if you can use your knowledge of escape
  characters to output the following:

  <pre>XO_
XX_
O_O</pre>

  and

  <pre>  "The Assyrian came down \ like a wolf on the fold, 
And his cohorts were gleaming \ in purple and gold;"</pre>

and

  <pre>  00
   00
000000
   00
  00</pre>
  </p></text>
</q>

<q type="python" id="Input">
  <program>input_num(xyz)
input_string(hello)
print(2*xyz)
print(hello)</program>
  <text>Programs are boring if you cannot do anything with them.  Depending on whether you want a number or a string, there are ways to ask for user input and place it in a specified variable.  To get a number, do: <pre>input_num(<i>variable name</i>)</pre>  To get a string, do: <pre>input_string(<i>variable name</i>)</pre> Try to use this to make a simple calculator program that asks for two numbers and then outputs the product.</text>
</q>

<q type="python" id="If">
  <program>print("Guess the value of 4*5-2-(4+37*4)")
input_num(guess)
if(guess != 4*5-2-(4+37*4)): 
   print("You LOSE!")
print("You guessed:")
print(guess)
if(guess == 4*5-2-(4+37*4)): 
   print("VICTORY!!!")</program>
  <text>All our programs so far execute every line from start to
  finish, in order, no exceptions.  Sometimes, we want to cordon off
  some lines and make them only execute under certain conditions.
  <p>To do this, first <b>indent</b> these lines--that is, put three
  additional spaces at the beginning of these lines.  Then add an "if"
  line just before them that looks like:

  <pre>if(<i>expression</i> <i>comparison</i> <i>expression</i>):</pre>

</p><p>The two expressions are, of course, expressions as we're used
to them, and the comparison is any of the following operators (with
the given meanings):

  <pre>== (is equal to)
!= (is not equal to)
&lt;  (is less than)
>  (is greater than)
&lt;= (is less than or equal to)
>= (is greater than or equal to)</pre>

 The whole block including the "if" line and all its indented lines is
 called an <b>if statement</b>.</p> <p>When the program gets to the
 "if" line, it will compare the two provided expressions
 appropriately.  If the comparison holds true, then the indented lines
 following the if statement will execute.  If the comparison does not
 hold true, then execution will proceed to the first line after the if
 statement that is not indented</p></text>
</q>

<q type="python" id="Nested if">
  <program>input_num(niceness)
print("Guess the value of 4*5-2-(4+37*4)")
input_num(guess)
if(guess != 4*5-2-(4+37*4)): 
   if(niceness &lt; 5):
      print("You LOSE!")
   if(niceness > 5): 
      print("Sorry!  Better luck next time!")
if(guess == 4*5-2-(4+37*4)): 
   print("VICTORY!!!")</program>
  <text>Inside an if statement, it is possible to include further if
  statements.  For example, if we want to make sure we have enough
  bananas we do:

<pre>if(bananas > 6):
   print("YAY!")</pre>

  To make sure that we have both enough bananas and enough bongos, we
  want to first check the bananas.  If they are sufficient, then in
  that case we want to also test the bongos.  So we want the
  bongo-testing if statement inside the banana-testing one:

<pre>if(bananas > 6): 
   if(bongos > 5): 
      print("YAY!")</pre>

  This is called a <b>nested if statement</b>.  We can of course nest
  further if statements inside this one to our heart's content.</text>
</q>

<q type="python" id="Else">
  <program>print("Guess the value of 4*5-2-(4+37*4)")
input_num(guess)
if(guess > 4*5-2-(4+37*4)): 
   print("Too big!")
else:
   if(guess &lt; 4*5-2-(4+37*4)): 
      print("Too small!")
   else: 
      print("VICTORY!!!")</program>
  <text>A problem in the previous program was 

<pre>if(niceness > 5): 
   print("You LOSE")
if(niceness > 5): 
   print("Sorry!")</pre>

But what happens if niceness is exactly 5?  We accidentally missed
this case.  <p>What we really wanted was to say "If niceness is less
than 5, be curt.  Otherwise, be tactful".  There is a programmatic
way of saying "otherwise" called "else".</p><p>Immediately
following the indented lines of an if statement, you may include the
line <pre>else:</pre> with the same level of indentation as the
corresponding if statement, and followed by further indented lines
that will be executed only if the comparison in the "if" line
failed.  So an easier way of doing the above is:

<pre>if(niceness > 5): 
   print("You LOSE")
else: 
   print("Sorry!")</pre>

</p></text>
</q>

<q type="python" id="While">
  <program>print("Guess the value of 4*5-2-(4+37*4)")
input_num(guess)
while(guess != 4*5-2-(4+37*4)): 
   if(guess > 4*5-2-(4+37*4)): 
      print("Too big!")
   else:
      print("Too small!")
   input_num(guess)
print("VICTORY!!!")</program>
  <text>Similar to an "if" line is the "while" line: <pre>while(<i>expr comp expr</i>):</pre>  It is also followed by one or more indented lines.  An if statement will execute the indented lines once through if the comparison holds true and then will move on.  A while statement will execute the indented lines if the comparison holds true, and then when the indented lines are finished it will return to the comparison and check it again.  <p>If it still holds true, the indented lines will be run again.  And if the comparison is still true after they are done, they will be run yet again, and so on until the comparison stops being true.  </p></text>
</q>

<q type="python" id="Puzzle 1">
  <program></program>
  <text>Write a program to input three numbers and output their
  average.  So if you input 1, 2, and 10, it should output
  4.33333...</text>
</q>

<q type="python" id="Puzzle 2">
  <program></program>
  <text>Write a program to input a number and sum all the integers
  between 0 and that number, inclusive.  Be careful as the input may
  be negative and/or a decimal.  <p>.For example, if you input -5.3, it
  should output -15, if you input 1, it should output 66, and if you
  input 0.3, it should output 0.</p></text>
</q>

<q type="python" id="Puzzle 3">
  <program></program>
  <text>Write a program to input a number and test whether that number
  is a square integer (i.e. is the product of an integer with itself).
  <p>For example, if you input 101, it should output "no", whereas if
  you input 81, it should output "yes".  </p></text>
</q>

<q type="python" id="Puzzle 4">
  <program></program>
  <text>Write a program to input a number and output whether that
  number is prime.  <p>For example, if you input 101, it should output
  "yes", whereas if you input 91, it should output "no".  </p></text>
</q>

<q type="python" id="Puzzle 5">
  <program></program>
  <text>Write a program to input a number.  Then, input that number of
  further numbers and then output the average of all these
  numbers.

  <p>For example, if you first input 4, it should ask for 4 more
  inputs.  If these inputs are 0, 2, 3, and 4, then it should output
  2.25.  </p></text>
</q>

<q type="python" id="Lightboard">
  <program>user_x = 0
user_y = 0
set_color(user_x,user_y,"red")
ok = 1
while(ok == 1):
   input_click(x,y,t,c)
   if((x-user_x)*(x-user_x)+(y-user_y)*(y-user_y) == 1):
      set_color(user_x,user_y,"gray")
      set_color(x,y,"red")
      user_x = x
      user_y = y</program>
  <text>It's possible that all this time you've been wondering what
  the "lb" button is for.  If you click it, it toggles the
  "lightboard", which is a primitive kind of screen that we can
  control.

  <p>To refer to a specific box on the lightboard, we will use x and y
  coordinates where x = 0, and y = 0 will be the top left box, and
  then the x-coordinate will determine how many boxes to the right we
  should go, while the y-coordinate will determine how many boxes
  down.  This does differ from the normal x, y coordinate systems from
  mathematics classes but is pretty normal in graphics
  programming.</p>

  <p>There are three things we can do with on the lightboard:
  <ul>
    <li>Set the text in a box</li>
    <li>Set the color of a box</li>
    <li>Wait for a user to click on a box and get information about
    the box they clicked on.</li>
  </ul>

  The provided example program uses these commands to from the basis
  of what could become a simple game.</p></text>
</q>

<q type="python" id="LB Text">
  <program>x = 0
while(x &lt; 10):
   y = 0
   while(y &lt; 10):
      set_text(x,y,"!")
      y = y + 1
   x = x + 1</program>
  <text>
    To set the text in a box, we use the line:
    
    <pre>set_text(<i>expr, expr, expr</i>)</pre>
    
    The first expression represents the x-coordinate and the second
    gives the y-coordinate of the chosen box.  The third expression
    should be a string of length 1, which will be placed into the box
    with the given coordinates.  For example, the 
  </text>
</q>

<q type="python" id="LB Color">
  <program>x = 0
while(x &lt; 10):
   y = 0
   while(y &lt; 10):
      set_color(x,y,"red")
      y = y + 1
   x = x + 1</program>
   <text>
     Likewise, we can also set the color of a box with a similar method
     
     <pre>set_color(<i>expr, expr, expr</i>)</pre>

     As before, the first two expressions are the coordinates of the
     box to modify.  The third expression should be a string that can
     be any simple color such as "red", "white", "black", "orange",
     "blue", etc.  The box at the given position will be set to that
     color.
  </text>
</q>

<q type="python" id="LB Click">
  <program>user_x = 0
user_y = 0
set_color(user_x,user_y,"red")
ok = 1
while(ok == 1):
   input_click(x,y,t,c)
   if((x-user_x)*(x-user_x)+(y-user_y)*(y-user_y) == 1):
      set_color(user_x,user_y,"gray")
      set_color(x,y,"red")
      user_x = x
      user_y = y</program>
  <text>
    Now for the interactive part: Getting a user's input.
    
    <pre>input_click(<i>variable name, variable name, variable name,
    variable name</i>)</pre>

    When this instruction is executed, the code will stop running and
    wait for the user to click on a box.  When they do, the
    x-coordinate of the box will be stored in the first variable, the
    y-coordinate will be stored in the second variable, the current
    text in the clicked box will be stored in the third variable, and
    the color of the box will be stored in the fourth.
    
    <p>We reprise the earlier example and invite you to experiment and
    elaborate.  This is the time to get creative!</p>
  </text>
</q>
</quest>
